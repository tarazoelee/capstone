'use client';
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("../utils");
var _dateUtils = require("../utils/dateUtils");
var _CalendarContext = require("./CalendarContext");
var _TableCell = _interopRequireDefault(require("./TableCell"));
var TableRow = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var _props$as = props.as,
    Component = _props$as === void 0 ? 'div' : _props$as,
    className = props.className,
    _props$classPrefix = props.classPrefix,
    classPrefix = _props$classPrefix === void 0 ? 'calendar-table' : _props$classPrefix,
    _props$weekendDate = props.weekendDate,
    weekendDate = _props$weekendDate === void 0 ? new Date() : _props$weekendDate,
    rest = (0, _objectWithoutPropertiesLoose2.default)(props, ["as", "className", "classPrefix", "weekendDate"]);
  var _useCalendarContext = (0, _CalendarContext.useCalendarContext)(),
    _useCalendarContext$d = _useCalendarContext.date,
    selected = _useCalendarContext$d === void 0 ? new Date() : _useCalendarContext$d,
    dateRange = _useCalendarContext.dateRange,
    disabledDate = _useCalendarContext.disabledDate,
    hoverRangeValue = _useCalendarContext.hoverRangeValue,
    inSameMonth = _useCalendarContext.inSameMonth,
    isoWeek = _useCalendarContext.isoWeek,
    onSelect = _useCalendarContext.onSelect,
    showWeekNumbers = _useCalendarContext.showWeekNumbers;
  var _useClassNames = (0, _utils.useClassNames)(classPrefix),
    prefix = _useClassNames.prefix,
    merge = _useClassNames.merge;
  var handleSelect = (0, _react.useCallback)(function (date, disabled, event) {
    if (disabled) {
      return;
    }
    onSelect === null || onSelect === void 0 ? void 0 : onSelect(date, event);
  }, [onSelect]);
  var renderDays = function renderDays() {
    var days = [];
    var _ref = dateRange || [],
      selectedStartDate = _ref[0],
      selectedEndDate = _ref[1];
    var _ref2 = hoverRangeValue !== null && hoverRangeValue !== void 0 ? hoverRangeValue : [],
      hoverStartDate = _ref2[0],
      hoverEndDate = _ref2[1];
    var isRangeSelectionMode = typeof dateRange !== 'undefined';
    for (var i = 0; i < 7; i += 1) {
      var thisDate = (0, _dateUtils.addDays)(weekendDate, i);
      var disabled = disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(thisDate, dateRange, _utils.DATERANGE_DISABLED_TARGET.CALENDAR);
      var unSameMonth = !(inSameMonth !== null && inSameMonth !== void 0 && inSameMonth(thisDate));
      var rangeStart = !unSameMonth && selectedStartDate && (0, _dateUtils.isSameDay)(thisDate, selectedStartDate);
      var rangeEnd = !unSameMonth && selectedEndDate && (0, _dateUtils.isSameDay)(thisDate, selectedEndDate);
      var isSelected = isRangeSelectionMode ? rangeStart || rangeEnd : (0, _dateUtils.isSameDay)(thisDate, selected);

      // TODO-Doma Move those logic that's for DatePicker/DateRangePicker to a separate component
      //           Calendar is not supposed to be reused this way
      var inRange = false;
      // for Selected
      if (selectedStartDate && selectedEndDate) {
        if ((0, _dateUtils.isBefore)(thisDate, selectedEndDate) && (0, _dateUtils.isAfter)(thisDate, selectedStartDate)) {
          inRange = true;
        }
        if ((0, _dateUtils.isBefore)(thisDate, selectedStartDate) && (0, _dateUtils.isAfter)(thisDate, selectedEndDate)) {
          inRange = true;
        }
      }

      // for Hovering
      if (!isSelected && hoverStartDate && hoverEndDate) {
        if (!(0, _dateUtils.isAfter)(thisDate, hoverEndDate) && !(0, _dateUtils.isBefore)(thisDate, hoverStartDate)) {
          inRange = true;
        }
        if (!(0, _dateUtils.isAfter)(thisDate, hoverStartDate) && !(0, _dateUtils.isBefore)(thisDate, hoverEndDate)) {
          inRange = true;
        }
      }
      days.push( /*#__PURE__*/_react.default.createElement(_TableCell.default, {
        key: (0, _dateUtils.format)(thisDate, 'yyyy-MM-dd'),
        date: thisDate,
        disabled: disabled,
        selected: isSelected,
        onSelect: handleSelect,
        unSameMonth: unSameMonth,
        rangeStart: rangeStart,
        rangeEnd: rangeEnd,
        inRange: inRange
      }));
    }
    return days;
  };
  var classes = merge(className, prefix('row'));
  return /*#__PURE__*/_react.default.createElement(Component, (0, _extends2.default)({}, rest, {
    ref: ref,
    role: "row",
    className: classes
  }), showWeekNumbers && /*#__PURE__*/_react.default.createElement("div", {
    className: prefix('cell-week-number'),
    role: "rowheader"
  }, (0, _dateUtils.format)(weekendDate, isoWeek ? 'I' : 'w')), renderDays());
});
TableRow.displayName = 'CalendarTableRow';
TableRow.propTypes = {
  weekendDate: _propTypes.default.instanceOf(Date),
  className: _propTypes.default.string,
  classPrefix: _propTypes.default.string
};
var _default = TableRow;
exports.default = _default;